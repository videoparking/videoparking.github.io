{"version":3,"sources":["api.js","MapView.js","URLImage.js","zonesApi.js","PreviewZonesComponent.js","PreviewDetectionsComponent.js","CamView.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","DefaultIcon","L","icon","iconRetinaUrl","iconRetina","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","Marker","prototype","options","trace","console","log","locations","pos","zones","polygon","location","a","API","get","response","data","MapView","useState","stats","first","state","setState","latLng","useParams","split","map","parseFloat","refreshStats","getStats","then","duration","frameTime","newS","document","title","message","catch","err","retries","useEffect","renewInterval","timer","setTimeout","clearTimeout","MapContainer","center","zoom","scrollWheelZoom","maxZoom","TileLayer","url","attribution","accessToken","s","locationId","loc","zone","markerPos","maxCars","parseInt","cap","pathOptions","fillColor","color","Polygon","positions","Popup","toLocaleString","undefined","maximumFractionDigits","to","URLImage","image","error","handleLoad","props","onLoadImage","handleError","this","loadImage","oldProps","src","removeEventListener","window","Image","addEventListener","text","fontSize","fill","x","y","scaleX","scale","scaleY","ref","node","imageNode","React","Component","norm","e","PreviewZonesComponent","loadZones","getZonesData","scaled","descaled","flat","info","name","last_detected_cars","max_detected_cars","ppoints","p","px","i","length","update_zones","zone_name","pi","modified","clone_zone_edge","splice","addNewZone","names","newName","String","fromCharCode","charCodeAt","newZone","downloadFile","fileName","fileContent","urlObject","URL","webkitURL","export_blob","Blob","navigator","msSaveBlob","HTMLAnchorElement","Error","save_link","createElementNS","href","createObjectURL","download","obj","ev","createEvent","initMouseEvent","dispatchEvent","fake_click","export_raw","points","stroke","modifiedColor","strokeWidth","closed","radius","draggable","onDragStart","newZones","evt","shiftKey","isDragging","onDragMove","movementX","movementY","target","onDragEnd","handleKeys","onKeyEvent","key","JSON","stringify","baseResolution","setEventKey","PreviewDetectionsComponent","detections","normed","d","object","att_x","bbox_x","bbox_w","att_y","bbox_y","bbox_h","bbox","confidence","toFixed","width","height","calc_vw","Math","max","documentElement","clientWidth","innerWidth","calc_vh","clientHeight","innerHeight","calc_scale","vw","vh","iw","ih","scale_by_w","scale_by_h","min","CamView","picSrc","firstPic","camera","makeStyle","saturation","sec","saturationF","Date","getTime","backgroundImage","backgroundColor","backgroundSize","backgroundRepeat","backgroundAttachment","backgroundPosition","filter","refreshPic","getPicData","style","newState","className","im","changes","updateImageSize","period_for_max","join","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34bb0659.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://ib9m7jp63g.execute-api.eu-central-1.amazonaws.com/dev/'\n//      baseURL: 'https://httpbin.org/status/404'\n});\n","import 'leaflet/dist/leaflet.css';\nimport React, { useState, useEffect }  from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport './MapView.css';\nimport API from './api';\nimport { MapContainer, TileLayer, Polygon, Tooltip, Marker, Popup, useMapEvents } from 'react-leaflet';\n\n// see https://github.com/Leaflet/Leaflet/issues/4968\nimport L from 'leaflet';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nlet DefaultIcon = L.icon({\n    iconRetinaUrl: iconRetina,\n    iconUrl: icon,\n    shadowUrl: iconShadow,\n    iconSize: [24,36],\n    iconAnchor: [12,36]\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\nconst trace = console.log;\n\nconst locations = {\n    \"8f38301f7f70d7d1/1\": {\n        pos: [52.371809, 5.188753],\n        zones: {\n            \"a\": {\n                polygon: [\n                    [52.371880, 5.1887],\n                    [52.371822, 5.18895],\n                    [52.371754, 5.18890],\n                    [52.371803, 5.188663]\n                ]\n            },\n            \"b\": {\n                polygon: [\n                    [52.372080, 5.188689],\n                    [52.372062, 5.188753],\n                    [52.371978, 5.188710],\n                    [52.371993, 5.188643]\n                ]\n            }\n        }\n    },\n    \"e92114fcbfd5688/1\": {\n        pos: [59.9373297, 30.4832178],\n        zones: {\n            \"a2\": {\n                polygon: [\n                    [59.937344, 30.483425],\n                    [59.937375, 30.482893],\n                    [59.937523, 30.483001],\n                    [59.937492, 30.483343]\n                ]\n            },\n            \"b2\": {\n                polygon: [\n                    [59.937120, 30.483006],\n                    [59.937160, 30.482604],\n                    [59.937375, 30.482893],\n                    [59.937250, 30.483076]\n                ]\n            },\n            \"c2\": {\n                polygon: [\n                    [59.937492, 30.483343],\n                    [59.937523, 30.483001],\n                    [59.937571, 30.483087],\n                    [59.937559, 30.483296]\n                ]\n            },\n            \"d2\": {\n                polygon: [\n                    [59.937101, 30.483478],\n                    [59.937120, 30.483006],\n                    [59.937250, 30.483076],\n                    [59.937344, 30.483425],\n                    [59.937135, 30.483499]\n                ]\n            },\n        }\n    }\n}\n\nasync function getStats(location) {\n    if (!location) {\n        return;\n    }\n    \n    const response = await API.get(`view?location=${location}`);\n    console.log(\"response:\", response);\n    return response.data;\n}\n\n\nfunction MapView() {\n\n    const [state, setState] = useState({\n        stats: [],\n\tfirst: true,\n        location: \"e92114fcbfd5688/1\"\n        // location: \"8f38301f7f70d7d1/1\", // TODO: Add location(s) detection for visible area at lat lon\n    });\n\n    const { latLng } = useParams();\n\n    if (latLng && latLng !== state.latLng) {\n        const pos = latLng.split(\",\").map(parseFloat);\n        console.log(\"pos:\", pos);\n        setState({\n            ...state,\n            latLng: latLng,\n            pos: pos,\n        });\n    }\n\n    const refreshStats = () => {\n\tgetStats(state.location).then(data => {\n            if (data) {\n\t        trace(data);\n\t        const duration = (data.duration ? data.duration : 60);\n                const frameTime = data.frameTime;\n                const newS = {\n                    ...state,\n\t\t    first: false,\n\t\t    duration: duration,\n                    frameTime: frameTime,\n                    stats: data.stats || [],\n\t        };\n                console.log(newS);\n\t        setState(newS);\n\t        document.title = data.message + `, parking at ${locations[state.location].pos}`;\n            }\n\t}).catch(err => {\n            console.log(err);\n\t    const duration = 30;\n            const retries = state.retries ? (state.retries + 1) : 0;\n\t    setState({\n                ...state,\n\t\tfirst: false,\n\t\tduration: duration,\n                retries: retries,\n                stats: [],\n\t    });\n\t    document.title = `Retrying (${retries})` + (state.frameTime ? ` from ${state.frameTime} ...` : '...');\n        });\n    };\n\t\t\n    useEffect(() => {\n\tconst renewInterval = state.first ? 0 : state.duration;\n\tconsole.log('Timeout till renew:', renewInterval);\n\tconst timer = setTimeout(refreshStats, renewInterval*1000);\n\t// Clear timeout if the component is unmounted\n\treturn () => {\n            console.log(\"Stopping renewal of MapView\");\n            clearTimeout(timer);\n        };\n    });\n\n    /*\n    function LocationMarker() {\n        const [position, setPosition] = useState(null)\n        const map = useMapEvents({\n            click() {\n                map.locate()\n            },\n            locationfound(e) {\n                setPosition(e.latlng)\n                map.flyTo(e.latlng, map.getZoom())\n            },\n        })\n\n        return position === null ? null : (\n            <Marker position={position}>\n                <Popup>You are here</Popup>\n            </Marker>\n        )\n    }\n    */\n\n    const Zones = (stats) => {\n        return (\n            stats.map((s) => {\n                const locationId = s[\"location\"]+\"/\"+s[\"camera\"];\n                const loc = locations[locationId];\n                if (loc) {\n                    trace(loc);\n                    const zone = loc.zones[s[\"zone\"]];\n                    if (zone) {\n                        trace(zone);\n                        const markerPos = zone.polygon[0];\n                        trace(markerPos);\n                        const maxCars = parseInt(s[\"max_detected_cars\"]);\n                        const lastCars = parseInt(s[\"last_detected_cars\"]);\n                        const cap = lastCars/maxCars;\n                        trace(cap);\n                        var pathOptions = { fillColor: 'blue', color: 'blue' };\n                        if (cap < 0.5) { pathOptions = { fillColor: 'green', color: 'green' } }\n                        else if (cap < 0.8) { pathOptions = { fillColor: 'red', color: 'red' } }\n                        else if (cap < 1.1) { pathOptions = { fillColor: 'black', color: 'black' } }\n                        \n                        return (\n                            <div key={locationId+\"-\"+s[\"zone\"]} >\n                                {/*<Marker position={markerPos} />*/}\n                                <Polygon\n                                    pathOptions={pathOptions}\n                                    positions={zone.polygon}\n                                >\n                                    <Popup>\n                                        {s[\"last_detected_cars\"]} cars parked by {s[\"time\"]} <br />\n                                        {s[\"max_detected_cars\"]} max (for period of {s[\"period_for_max\"]}) <br />\n                                        {(100*cap).toLocaleString(undefined, {maximumFractionDigits:0})+'%'} filled <br />\n                                        <Link to={\"/cam/\"+s[\"location\"]+\"/\"+s[\"camera\"]+\"/\"+s[\"zone\"]}>view</Link>\n                                    </Popup>\n                                    {/*\n                                       <Tooltip direction=\"bottom\"\n                                       offset={[0, 0]}\n                                       opacity={1}\n                                       permanent\n                                       >\n                                       {s[\"last_detected_cars\"]}/{s[\"max_detected_cars\"]}\n                                       </Tooltip>\n                                     */}\n                                </Polygon>\n                            </div>\n                        );\n                    } else {\n                        trace(s[\"zone\"]);\n                        return null;\n                    }\n                } else {\n                    trace(locationId);\n                    return null;\n                }\n            })\n        );\n    }\n    \n    return (\n        <MapContainer\n            center={state.pos || [52.371809, 5.188753]}\n            zoom={19}\n            scrollWheelZoom={false}\n            maxZoom={20}\n        >\n            <TileLayer\n                url=\"https://api.mapbox.com/styles/v1/mapbox/streets-v11/tiles/{z}/{x}/{y}?access_token={accessToken}\"\n                attribution='<a href=\"http://videoparking.live/copyright\">VideoParking.live</a> | Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery &copy; <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n                accessToken=\"pk.eyJ1IjoidmlkZW9wYXJraW5nIiwiYSI6ImNraTZqa2QycTBmY2EzMG1xZ2R4eGpqaGMifQ.LG9VLK74nBfMJsoxpLQhxg\"\n                maxZoom={20}\n            />\n            {/*<LocationMarker />*/}\n            {Zones(state.stats)}\n        </MapContainer>\n    );\n}\n\nexport default MapView;\n","import React from 'react';\nimport {Image, Text} from 'react-konva';\n\n// custom component that will handle loading image from url\n// you may add more logic here to handle \"loading\" state\n// or if loading is failed\n// VERY IMPORTANT NOTES:\n// at first we will set image state to null\n// and then we will set it to native image instance when it is loaded\nclass URLImage extends React.Component {\n    state = {\n        image: null,\n        error: undefined\n    };\n    componentDidMount() {\n        this.loadImage();\n    }\n    componentDidUpdate(oldProps) {\n        if (oldProps.src !== this.props.src) {\n            this.loadImage();\n        }\n    }\n    componentWillUnmount() {\n        this.image.removeEventListener('load', this.handleLoad);\n    }\n    loadImage() {\n        if (this.props.src) {\n            // save to \"this\" to remove \"load\" handler on unmount\n            this.image = new window.Image();\n            this.image.src = this.props.src;\n            this.image.addEventListener('load', this.handleLoad);\n            this.image.addEventListener('error', this.handleError);\n        } else {\n            this.image = undefined;\n        }\n    }\n    handleLoad = () => {\n        // after setState react-konva will update canvas and redraw the layer\n        // because \"image\" property is changed\n        this.setState({\n            image: this.image,\n            error: undefined\n        });\n        // if you keep same image object during source updates\n        // you will have to update layer manually:\n        // this.imageNode.getLayer().batchDraw();\n        if (this.props.onLoadImage) {\n            this.props.onLoadImage(this.image);\n        }\n    };\n    handleError = (err) => {\n        this.setState({\n            error: \"Loading...\",\n        });\n    };\n    render() {\n        if (this.state.error !== undefined) {\n            return (\n                <Text\n                    text={this.state.error}\n                    fontSize={20}\n                    fill={\"red\"}\n                />\n            );\n        } else {\n            return (\n                <Image\n                    x={0}\n                    y={0}\n                    image={this.state.image}\n                    scaleX={this.props.scale}\n                    scaleY={this.props.scale}\n                    ref={node => {\n                        this.imageNode = node;\n                    }}\n                />\n            );\n        }\n    }\n}\n\nexport default URLImage;\n","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://raw.githubusercontent.com/videoparking/zones/master/v1/',\n//      baseURL: 'https://httpbin.org/status/404'\n});\n","import React, { useState, useEffect } from 'react';\nimport Konva from 'konva';\nimport {Shape, Group, Text, Line, Circle} from 'react-konva';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport API from './zonesApi';\n\n\nasync function getZonesData(location) {\n    if (location) {\n        const response = await API.get(`${location}/zones-v1.json`);\n        console.log(\"response:\", response);\n        return response.data;\n    } else {\n        return undefined;\n    }\n}\n\nfunction norm(stats) {\n    const s = {};\n    stats.map(e =>\n        s[e.zone] = e\n    );\n    return s;\n}\n\nconst PreviewZonesComponent = (props) => {\n    const [state, setState] = useState({\n        zones: [],\n        stats: norm(props.stats),\n    });\n\n    useEffect(() => {\n        loadZones();\n    }, [props.location]);\n\n    useEffect(() => {\n        setState({\n            ...state,\n            stats: norm(props.stats),\n        });\n    }, [props.stats]);\n    \n    const loadZones = () => {\n        getZonesData(props.location).then(data => {\n            console.log(data);\n            setState({\n                zones: data.zones,\n                stats: norm(props.stats),\n            });\n        }).catch(err => {\n            console.log(\"ERROR:\",err);\n            setState({\n                zones: [],\n            });\n        });\n    };\n\n    const scaled = (e) => e * props.scale;\n    const descaled = (e) => e / props.scale;\n\n    const polygon = (zone) => {\n        return zone.polygon.map(([x,y]) => [scaled(x), scaled(y)]).flat();\n    }\n    \n    const info = (name) => {\n        if (state.stats) {\n            const stats = state.stats[name];\n            if (stats) {\n                return `${name} ${stats.last_detected_cars}/${stats.max_detected_cars}`;\n            } else {\n                return name;\n            }\n        }\n    };\n\n    const ppoints = (zone) => {\n        const p = zone.polygon;\n        var px = [];\n        for (var i = 0; i < p.length; i++) {\n            const [x,y] = p[i];\n            px[i] = {x:x,y:y,i:i};\n        }\n        console.log(\"ppoints:\", px);\n        return px;\n    }\n\n    const update_zones = (zone_name, pi, x, y) => {\n        var zones = []\n        for (var i = 0; i < state.zones.length; i++) {\n            const zone = state.zones[i];\n            if (zone.name === zone_name) {\n                zone.polygon[pi] = [x,y];\n                zone.modified = true;\n            }\n            zones[i] = zone;\n        }\n        return zones;\n    }\n\n    const clone_zone_edge = (zone_name, pi) => {\n        var zones = []\n        for (var i = 0; i < state.zones.length; i++) {\n            const zone = state.zones[i];\n            if (zone.name === zone_name) {\n                zone.polygon.splice(pi, 0, zone.polygon[pi]);\n                zone.modified = true;\n            }\n            zones[i] = zone;\n        }\n        return zones;\n    }\n\n    const pickNewName = (names) => {\n        return String.fromCharCode('a'.charCodeAt(0) + names.length);\n    };\n\n    const addNewZone = () => {\n        let [x,y,h,w] = [100,100,500,500];\n        let newName = pickNewName(state.zones.map(zone => zone.name));\n        let newZone = {\n            name: newName,\n            polygon: [\n                [x, y],\n                [x+w, y],\n                [x+w, y+h],\n                [x, y+h],\n            ],\n            modified: true\n        };\n        console.log('Adding new zone', newName);\n        setState({\n            ...state,\n            zones: [...state.zones, newZone],\n        });\n    };\n    \n    const setEventKey = (key) => {\n        console.log(\"key:\", key);\n        if (key === 'e') {\n            downloadFile(\n                `${props.location}/zones-v1.json`,\n                JSON.stringify(\n                    {\n                        \"base_resolution\": props.baseResolution,\n                        \"zones\": state.zones\n                    },\n                    null,\n                    2\n                )\n            );\n        } else if (key === 'a') {\n            addNewZone();\n        }\n    };\n\n    /**\n     * See https://github.com/axetroy/react-download/blob/master/src/react-download.jsx\n     */\n    const downloadFile = (fileName, fileContent) => {\n        function fake_click(obj) {\n            let ev = document.createEvent(\"MouseEvents\");\n            ev.initMouseEvent(\n                \"click\",\n                true,\n                false,\n                window,\n                0,\n                0,\n                0,\n                0,\n                0,\n                false,\n                false,\n                false,\n                false,\n                0,\n                null\n            );\n            obj.dispatchEvent(ev);\n        }\n        function export_raw(name, data) {\n            let urlObject = window.URL || window.webkitURL || window;\n            let export_blob = new Blob([data]);\n\n            if ('msSaveBlob' in navigator) {\n                // Prefer msSaveBlob if available - Edge supports a[download] but\n                // ignores the filename provided, using the blob UUID instead.\n                // msSaveBlob will respect the provided filename\n                navigator.msSaveBlob(export_blob, name);\n            } else if ('download' in HTMLAnchorElement.prototype) {\n                let save_link = document.createElementNS(\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"a\"\n                );\n                save_link.href = urlObject.createObjectURL(export_blob);\n                save_link.download = name;\n                fake_click(save_link);\n            } else {\n                throw new Error(\"Neither a[download] nor msSaveBlob is available\");\n            }\n        }\n        export_raw(fileName, fileContent);\n    }\n    \n    const ren = () => (\n        state.zones.map((zone) =>\n            <Group\n                key={zone.name}\n                x={0}\n                y={0}\n            >\n                <Text\n                    text={info(zone.name)}\n                    x={3 + zone.polygon[0][0] * props.scale}\n                    y={zone.polygon[0][1] * props.scale}\n                    fontSize={10}\n                    fill={props.color}\n                />\n                <Line\n                    points={polygon(zone)}\n                    stroke={zone.modified ? props.modifiedColor : props.color}\n                    strokeWidth={1}\n                    closed={true}\n                />\n                {ppoints(zone).map(({x,y,i}) =>\n                    <Circle\n                        key={zone.name + \"-p-\" + i}\n                        x={scaled(x)}\n                        y={scaled(y)}\n                        radius={5}\n                        fill={zone.modified ? props.modifiedColor : props.color}\n                        draggable\n                        onDragStart={e => {\n                            console.log(\">>\", e);\n                            let newZones = e.evt.shiftKey ? { zones: clone_zone_edge(zone.name, i) } : {};\n                            setState({\n                                ...state,\n                                isDragging: true,\n                                ...newZones\n                            });\n                        }}\n                        onDragMove={e => {\n                            if (e.evt.movementX != 0 || e.evt.movementY != 0) {\n                                console.log(\">>>\", e);\n                                setState({\n                                    ...state,\n                                    isDragging: true,\n                                    zones: update_zones(zone.name, i, descaled(e.target.x()), descaled(e.target.y())),\n                                });\n                            }\n                        }}\n                        onDragEnd={e => {\n                            console.log(\">>>>\", e);\n                            setState({\n                                ...state,\n                                isDragging: false,\n                                zones: update_zones(zone.name, i, descaled(e.target.x()), descaled(e.target.y())),\n                            });\n                        }}\n                    />\n                )}\n            </Group>\n            )\n    );\n\n    return (\n        <Group>\n            {ren()}\n            <KeyboardEventHandler handleKeys={['e', 'a']} onKeyEvent={(key, e) => setEventKey(key)}/>\n        </Group>\n    );\n}\n\n\nexport default PreviewZonesComponent;\n","import React from 'react';\nimport {Rect, Text, Group} from 'react-konva';\n\n\nclass PreviewDetectionsComponent extends React.Component {\n    state = {\n        detections: this.props.detections.map((e) => this.norm(e)),\n    };\n    componentDidMount() {\n        //\n    }\n    componentDidUpdate(oldProps) {\n        if (oldProps.detections !== this.props.detections) {\n            const normed = this.props.detections.map((e) => this.norm(e))\n            this.setState({\n                detections: normed\n            });\n        }\n    }\n    componentWillUnmount() {\n        //\n    }\n    norm(d) {\n        const dn = {\n            \"object\": d.object,\n            \"confidence\": parseFloat(d[\"measure_value\"]),\n            \"bbox\": {\n                \"x\": parseInt(d.att_x) + parseInt(d.bbox_x) - parseInt(d.bbox_w)/2,\n                \"y\": parseInt(d.att_y) + parseInt(d.bbox_y) - parseInt(d.bbox_h)/2,\n                \"width\": parseInt(d.bbox_w),\n                \"height\": parseInt(d.bbox_h),\n            },\n        };\n        return (dn);\n    }\n    scaled(e) {\n        return e * this.props.scale;\n    }\n    render() {\n        return (\n            this.state.detections.map(d =>\n                <Group\n                    key={d.confidence} // hope confidence will differ at least in grains\n                    x={this.scaled(d.bbox.x)}\n                    y={this.scaled(d.bbox.y)}\n                >\n                    <Text\n                        text={d.object + \" \" + d.confidence.toFixed(2)}\n                        x={3}\n                        fontSize={10}\n                        fill={this.props.color}\n                    />\n                    <Rect\n                        width={this.scaled(d.bbox.width)}\n                        height={this.scaled(d.bbox.height)}\n                        stroke={this.props.color}\n                        strokeWidth={1}\n                    />\n                </Group>\n            )\n        );\n    }\n}\n\nexport default PreviewDetectionsComponent;\n","import React, { useState, useEffect }  from 'react';\nimport { useParams } from 'react-router-dom';\nimport './CamView.css';\nimport API from './api';\nimport URLImage from './URLImage'\nimport PreviewZonesComponent from './PreviewZonesComponent'\nimport PreviewDetectionsComponent from './PreviewDetectionsComponent'\nimport {Layer, Stage, Text, Group} from 'react-konva';\n\nconst trace = console.log;\n\n// const detections_sample = [\n//     {\n//         \"zone\": \"a\",\n//         \"bbox_w\": \"376\",\n//         \"bbox_h\": \"309\",\n//         \"bbox_x\": \"1310\",\n//         \"bbox_y\": \"324\",\n//         \"att_y\": \"1300\",\n//         \"att_x\": \"0\",\n//         \"location\": \"8f38301f7f70d7d1\",\n//         \"camera\": \"1\",\n//         \"detector_hostname\": \"videoparking-detector-67cf67cd55-8kmll\",\n//         \"object\": \"car\",\n//         \"measure_value\": 0.7678198218345642,\n//         \"measure_name\": \"confidence\",\n//         \"time\": \"2020-11-16 00:38:00.000000000\"\n//     },\n//     {\n//         \"zone\": \"a\",\n//         \"bbox_w\": \"379\",\n//         \"bbox_h\": \"269\",\n//         \"bbox_x\": \"2115\",\n//         \"bbox_y\": \"265\",\n//         \"att_y\": \"1300\",\n//         \"att_x\": \"0\",\n//         \"location\": \"8f38301f7f70d7d1\",\n//         \"camera\": \"1\",\n//         \"detector_hostname\": \"videoparking-detector-67cf67cd55-8kmll\",\n//         \"object\": \"car\",\n//         \"measure_value\": 0.7678198218342,\n//         \"measure_name\": \"confidence\",\n//         \"time\": \"2020-11-16 00:38:00.000000000\"\n//     },    \n// ];\n\n\nasync function getPicData(location) {\n    const response = await API.get(`view?location=${location}&image=yes&detections=yes`);\n    console.log(\"response:\", response);\n    return response.data;\n\n    // return new Promise( (resolutionFunc,rejectionFunc) => {\n    // \t\tresolutionFunc({\n    // \t\t\t\timage: { url: \"https://www.ima-home.be/layout/uploads/2020/06/ima-slide1.jpg\" },\n    // \t\t\t\tmessage: \"xxxxx\",\n    // \t\t});\n    // });\n}\n\nfunction calc_vw() {\n    return Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n}\n\nfunction calc_vh() {\n    return Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);\n}\n\nfunction calc_scale(vw, vh, iw, ih) {\n    if (vw && vh && iw && ih) {\n        const scale_by_w = vw/iw;\n        const scale_by_h = vh/ih;\n        return Math.min(scale_by_w, scale_by_h);\n    } else {\n        return 0.25;\n    }\n}\n\nfunction CamView() {\n\n    const [state, setState] = useState({\n\tpicSrc: undefined,\n\tfirstPic: true,\n        vw: calc_vw(),\n        vh: calc_vh(),\n        scale: calc_scale(calc_vw(), calc_vh()),\n        detections: [],\n        stats: [],\n    });\n\n    const { location, camera } = useParams();\n\n    const makeStyle = (url, frameTime) => {\n        // See:\n        // - https://css-tricks.com/almanac/properties/f/filter/\n        // - https://css-tricks.com/gooey-effect/\n        // - https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Backgrounds_and_Borders/Resizing_background_images\n        const now = new Date();\n        const frameAge = (now.getTime() - new Date(frameTime).getTime())/1000; // in sec\n        const expectedAge = 5 + 60; // sec\n        const blur = 0;\n\n        const saturationF = (sec) => {\n            /*\n             * Saturation [0-100] for:\n             *   - 1 min is 100% (full color)\n             *   - 5 min is 0% (no colors)\n             */\n            const x = sec / 60.0; // min, fractions\n            return Math.max(0, Math.min(100, 100 - 25 * x));\n        }\n\n        const saturation = saturationF(frameAge - expectedAge);\n\n        return {\n            backgroundImage:`url(${url})`,\n            backgroundColor: '#282c34',\n            backgroundSize: 'contain',\n            backgroundRepeat: 'no-repeat',\n            backgroundAttachment: 'fixed',\n            backgroundPosition: 'center',\n            filter: `blur(${blur}px) saturate(${saturation}%)`,\n        };\n    };\n\n    const refreshPic = () => {\n\tgetPicData(location + \"/\" + camera).then(data => {\n\t    trace(data);\n\t    const duration = (data.duration ? data.duration : 60);\n            const url = data.image.url;\n            const frameTime = data.frameTime;\n            const style = makeStyle(url, frameTime);\n            //console.log(\">>>>>\", url);\n            const newState = {\n                ...state,\n\t\tpicSrc: url,\n\t\tfirstPic: false,\n\t\tduration: duration,\n                frameTime: frameTime,\n                style: style,\n                detections: data.detections || [],\n                stats: data.stats || [],\n\t    }\n\t    setState(newState);\n\t    document.title = data.message + `, parking at ${location}/${camera} ${new Date(frameTime)}`;\n\t}).catch(err => {\n            console.log(err);\n\t    const duration = 30;\n            const style = makeStyle(state.picSrc, state.frameTime);\n            const retries = state.retries ? (state.retries + 1) : 0;\n\t    setState({\n                ...state,\n\t\tpicSrc: state.picSrc,\n\t\tfirstPic: false,\n\t\tduration: duration,\n                style: style,\n                retries: retries,\n                detections: [],\n                stats: [],\n\t    });\n\t    document.title = `Retrying (${retries})` + (state.frameTime ? ` from ${state.frameTime} ...` : '...');\n        });\n    };\n\n    if (location !== state.location || camera !== state.camera) {\n        setState({\n            ...state,\n\t    firstPic: true,\n            location: location,\n            camera: camera,\n\t});\n\t//refreshPic();\n    }\n\n    useEffect(() => {\n\tconst renewInterval = state.firstPic ? 0 : state.duration;\n\tconsole.log('Timeout till renew:', renewInterval);\n\tconst timer = setTimeout(refreshPic, renewInterval*1000);\n\t// Clear timeout if the component is unmounted\n\treturn () => {\n            console.log(\"Stopping renewal of CamView\");\n            clearTimeout(timer);\n        };\n    });\n\n    const updateImageSize = (im) => {\n        const vw = calc_vw();\n        const vh = calc_vh();\n        const iw = im ? im.width : state.iw;\n        const ih = im ? im.height : state.ih;\n        const scale = calc_scale(vw,vh,iw,ih);\n        if (iw !== state.iw || ih !== state.ih ||\n            vw !== state.vw || vh !== state.vh ||\n            scale !== state.scale\n           ) {\n            const changes = {\n                vw: vw,\n                vh: vh,\n                iw: iw,\n                ih: ih,\n                scale: scale,\n            };\n            console.log(\"[!] New state changes:\", changes);\n            setState({\n                ...state,\n                ...changes,\n\t    });\n        }\n    }\n\n    return (\n\t<div className=\"CamView\"\n\t>\n\t    <div className=\"CamView-header\">\n                <Stage\n                    width={state.vw}\n                    height={state.vh}\n                    style={{backgroundColor:'dimgray'}}\n                >\n                    <Layer>\n                        <URLImage\n                            src={state.picSrc}\n                            scale={state.scale}\n                            onLoadImage={(i) => updateImageSize(i)}\n                        />\n                    </Layer>\n                    <Layer>\n                        <PreviewZonesComponent\n                            location={location + \"/\" + camera}\n                            stats={state.stats}\n                            scale={state.scale}\n                            color=\"magenta\"\n                            modifiedColor=\"red\"\n                            baseResolution={[state.iw, state.ih]}\n                        />\n                    </Layer>\n                    <Layer>\n                        <PreviewDetectionsComponent\n                            detections={state.detections}\n                            scale={state.scale}\n                            color=\"yellow\"\n                        />\n                    </Layer>\n                    <Layer>\n                        <Group\n                            x={state.vw - 200}\n                            y={3}\n                        >\n                            <Text\n                                text={`Info:\n  location: ${location}\n  camera: ${camera}\n  frame time: ${state.frameTime}\n  detections: ${state.detections.length}\n  zones:\n    ` + state.stats.map(stats => `${stats.zone}: ${stats.last_detected_cars}/${stats.max_detected_cars} [max of ${stats.period_for_max}]`).join(`\n    `)}\n                                fontSize={10}\n                                fill={\"magenta\"}\n                            />\n                        </Group>\n                        <Group\n                            x={state.vw - 180}\n                            y={state.vh - 120}\n                        >\n                            <Text\n                                text={`Config:\n  screen: ${state.vw}x${state.vh}\n  scale: ${state.scale}\n\nKeys:\n  'e': export zones\n  'a': add new zone\n\nHelp:\n  - Move zone edge points with mouse.\n    Use shift to clone edges.\n`}\n                                fontSize={10}\n                                fill={\"black\"}\n                            />\n                        </Group>\n                    </Layer>                \n                </Stage>\n\t    </div>\n\t</div>\n    );\n}\n\nexport default CamView;\n","import React  from 'react';\nimport './App.css';\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom';\nimport MapView from './MapView';\nimport CamView from './CamView';\n\n\nconst locations = [\n    \"8f38301f7f70d7d1/1\",\n    \"a07345b2737af5f/1\",\n    \"e92114fcbfd5688/1\"\n]\n\n\nfunction App() {\n\n    return (\n        <div>\n            <h1>VideoParking</h1>\n            <HashRouter>\n                <nav>\n                    <ul>\n                        <li>8f38301f7f70d7d1/1 : <Link to=\"/map/52.371809,5.188753\">Map</Link> &mdash; <Link to=\"/cam/8f38301f7f70d7d1/1\">Camera</Link></li>\n                        <li>a07345b2737af5f/1 : <Link to=\"/cam/a07345b2737af5f/1\">Camera</Link></li>\n                        <li>e92114fcbfd5688/1 : <Link to=\"/map/59.9373297,30.4832178\">Map</Link> &mdash; <Link to=\"/cam/e92114fcbfd5688/1\">Camera</Link></li>\n                    </ul>\n                </nav>\n                <Switch>\n                    <Route path=\"/map/:latLng\">\n                        <MapView />\n                    </Route>\n                    <Route path=\"/cam/:location/:camera/:zone\">\n                        <CamView />\n                    </Route>\n                    <Route path=\"/cam/:location/:camera\">\n                        <CamView />\n                    </Route>\n                    <Route path=\"/\">\n                        <MapView />\n                    </Route>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import MapApp from './MapApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}