{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","trace","console","log","a","API","get","response","data","App","useState","picSrc","undefined","firstPic","state","setState","makeStyle","url","frameTime","saturation","sec","x","Math","max","min","saturationF","Date","getTime","backgroundImage","backgroundColor","backgroundSize","backgroundRepeat","backgroundAttachment","backgroundPosition","filter","useEffect","renewInterval","duration","timer","setTimeout","getPicData","then","style","document","title","message","catch","err","retries","clearTimeout","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"mTAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,mECCPC,EAAQC,QAAQC,I,4CAEtB,4BAAAC,EAAA,sEACyBC,EAAIC,IAAI,QADjC,cACQC,EADR,OAEEL,QAAQC,IAAI,YAAaI,GAF3B,kBAGSA,EAASC,MAHlB,4C,sBAmGeC,MAtFf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,YAAQC,EACRC,UAAU,IAHC,mBACNC,EADM,KACCC,EADD,KAMLC,EAAY,SAACC,EAAKC,GAKpB,IAeMC,EAVc,SAACC,GAMjB,IAAMC,EAAID,EAAM,GAChB,OAAOE,KAAKC,IAAI,EAAGD,KAAKE,IAAI,IAAK,IAAM,GAAKH,IAG7BI,GAfP,IAAIC,MACMC,UAAY,IAAID,KAAKR,GAAWS,WAAW,IAC7C,IAepB,MAAO,CACHC,gBAAgB,OAAD,OAAQX,EAAR,KACfY,gBAAiB,UACjBC,eAAgB,UAChBC,iBAAkB,YAClBC,qBAAsB,QACtBC,mBAAoB,SACpBC,OAAO,QAAD,OArBG,EAqBH,wBAA8Bf,EAA9B,QA0ChB,OAtCAgB,qBAAU,WACR,IAAMC,EAAgBtB,EAAMD,SAAW,EAAIC,EAAMuB,SACjDnC,QAAQC,IAAI,sBAAuBiC,GACnC,IAAME,EAAQC,YAAW,Y,2CACvBC,GAAaC,MAAK,SAAAjC,GAChBP,EAAMO,GACN,IAAM6B,EAAY7B,EAAK6B,SAAW7B,EAAK6B,SAAW,GACpCpB,EAAMT,EAAKS,IACXC,EAAYV,EAAKU,UACjBwB,EAAQ1B,EAAUC,EAAKC,GACrCH,EAAS,CACPJ,OAAQM,EACRJ,UAAU,EACVwB,SAAUA,EACAnB,UAAWA,EACXwB,MAAOA,IAEnBC,SAASC,MAAQpC,EAAKqC,QAAL,uBAA+B,IAAInB,KAAKR,OACxD4B,OAAM,SAAAC,GACC7C,QAAQC,IAAI4C,GACpB,IACcL,EAAQ1B,EAAUF,EAAMH,OAAQG,EAAMI,WACtC8B,EAAUlC,EAAMkC,QAAWlC,EAAMkC,QAAU,EAAK,EAC9DjC,EAAS,CACPJ,OAAQG,EAAMH,OACdE,UAAU,EACVwB,SANe,GAOLnB,UAAWJ,EAAMI,UACjBwB,MAAOA,EACPM,QAASA,IAErBL,SAASC,MAAQ,oBAAaI,EAAb,MAA2BlC,EAAMI,UAAN,gBAA2BJ,EAAMI,UAAjC,QAAmD,YAElF,IAAdkB,GAEH,OAAO,kBAAMa,aAAaX,OAItB,yBAAKY,UAAU,MAAMR,MAAO5B,EAAM4B,OACpC,yBAAKQ,UAAU,cACRpC,EAAMI,UAAY,GAAK,6BCvFhBiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACL/D,QAAQ+D,MAAMA,EAAMpB,c","file":"static/js/main.67a14dd1.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://ib9m7jp63g.execute-api.eu-central-1.amazonaws.com/dev/'\n//      baseURL: 'https://httpbin.org/status/404'\n});\n","import React, { useState, useEffect }  from 'react';\nimport './App.css';\nimport API from './api';\n\nconst trace = console.log;\n\nasync function getPicData() {\n\t\tconst response = await API.get(\"view\");\n\t\tconsole.log(\"response:\", response);\n\t\treturn response.data;\n\n\t\t// return new Promise( (resolutionFunc,rejectionFunc) => {\n\t\t// \t\tresolutionFunc({\n\t\t// \t\t\t\turl: \"https://www.ima-home.be/layout/uploads/2020/06/ima-slide1.jpg\",\n\t\t// \t\t\t\tmessage: \"xxxxx\",\n\t\t// \t\t});\n\t\t// });\n}\n\nfunction App() {\n\t\tconst [state, setState] = useState({\n\t\t\t\tpicSrc: undefined,\n\t\t\t\tfirstPic: true,\n\t\t});\n\n    const makeStyle = (url, frameTime) => {\n        // See:\n        // - https://css-tricks.com/almanac/properties/f/filter/\n        // - https://css-tricks.com/gooey-effect/\n        // - https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Backgrounds_and_Borders/Resizing_background_images\n        const now = new Date();\n        const frameAge = (now.getTime() - new Date(frameTime).getTime())/1000; // in sec\n        const expectedAge = 5 + 60; // sec\n        const blur = 0;\n\n        const saturationF = (sec) => {\n            /*\n             * Saturation [0-100] for:\n             *   - 1 min is 100% (full color)\n             *   - 5 min is 0% (no colors)\n             */\n            const x = sec / 60.0; // min, fractions\n            return Math.max(0, Math.min(100, 100 - 25 * x));\n        }\n\n        const saturation = saturationF(frameAge - expectedAge);\n\n        return {\n            backgroundImage:`url(${url})`,\n            backgroundColor: '#282c34',\n            backgroundSize: 'contain',\n            backgroundRepeat: 'no-repeat',\n            backgroundAttachment: 'fixed',\n            backgroundPosition: 'center',\n            filter: `blur(${blur}px) saturate(${saturation}%)`,\n        };\n    };\n\t\t\n\t\tuseEffect(() => {\n\t\t\t\tconst renewInterval = state.firstPic ? 0 : state.duration;\n\t\t\t\tconsole.log('Timeout till renew:', renewInterval);\n\t\t\t\tconst timer = setTimeout(() => {\n\t\t\t\t\t\tgetPicData().then(data => {\n\t\t\t\t\t\t\t\ttrace(data);\n\t\t\t\t\t\t\t\tconst duration = (data.duration ? data.duration : 60);\n                const url = data.url;\n                const frameTime = data.frameTime;\n                const style = makeStyle(url, frameTime);\n\t\t\t\t\t\t\t\tsetState({\n\t\t\t\t\t\t\t\t\t\tpicSrc: url,\n\t\t\t\t\t\t\t\t\t\tfirstPic: false,\n\t\t\t\t\t\t\t\t\t\tduration: duration,\n                    frameTime: frameTime,\n                    style: style,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tdocument.title = data.message + `, parking at ${new Date(frameTime)}`;\n\t\t\t\t\t\t}).catch(err => {\n                console.log(err);\n\t\t\t\t\t\t\t\tconst duration = 30;\n                const style = makeStyle(state.picSrc, state.frameTime);\n                const retries = state.retries ? (state.retries + 1) : 0;\n\t\t\t\t\t\t\t\tsetState({\n\t\t\t\t\t\t\t\t\t\tpicSrc: state.picSrc,\n\t\t\t\t\t\t\t\t\t\tfirstPic: false,\n\t\t\t\t\t\t\t\t\t\tduration: duration,\n                    frameTime: state.frameTime,\n                    style: style,\n                    retries: retries,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tdocument.title = `Retrying (${retries})` + (state.frameTime ? ` from ${state.frameTime} ...` : '...');\n            });\n\t\t\t\t}, renewInterval*1000);\n\t\t\t\t// Clear timeout if the component is unmounted\n\t\t\t\treturn () => clearTimeout(timer);\n\t\t});\n\n\t\treturn (\n\t\t\t\t    <div className=\"App\" style={state.style}>\n\t\t\t\t\t\t<div className=\"App-header\">\n            {state.frameTime ? \"\" : \"Loading parking view...\"}\n\t\t\t\t\t\t</div>\n\t\t\t\t </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}