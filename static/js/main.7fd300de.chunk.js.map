{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","Pic","props","src","alt","a","API","get","response","console","log","data","App","useState","picSrc","undefined","firstPic","state","setState","useEffect","renewInterval","duration","timer","setTimeout","getPicData","then","url","document","title","message","clearTimeout","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"mTAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,mECCX,SAASC,EAAIC,GAEX,OACI,yBAAKC,IAAKD,EAAMC,IAAKC,IAAI,iB,4CAI/B,4BAAAC,EAAA,sEACyBC,EAAIC,IAAI,QADjC,cACQC,EADR,OAEEC,QAAQC,IAAI,YAAaF,GAF3B,kBAGSA,EAASG,MAHlB,4C,sBAiDeC,MAnCf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,YAAQC,EACRC,UAAU,IAHC,mBACNC,EADM,KACCC,EADD,KAyBb,OAnBAC,qBAAU,WACR,IAAMC,EAAgBH,EAAMD,SAAW,EAAIC,EAAMI,SACjDZ,QAAQC,IAAI,WAAaU,EAAgB,4BACzC,IAAME,EAAQC,YAAW,Y,2CACvBC,GAAaC,MAAK,SAAAd,GAChBF,QAAQC,IAAIC,GACZ,IAAMU,EAAYV,EAAKU,SAAWV,EAAKU,SAAW,GAClDH,EAAS,CACPJ,OAAQH,EAAKe,IACbV,UAAU,EACVK,SAAUA,IAEZM,SAASC,MAAQjB,EAAKkB,aAET,IAAdT,GAEH,OAAO,kBAAMU,aAAaR,OAIxB,yBAAKS,UAAU,OACf,yBAAKA,UAAU,cACf,kBAAC9B,EAAD,CAAKE,IAAKc,EAAMH,YCzCFkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASa,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMlB,c","file":"static/js/main.7fd300de.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://ib9m7jp63g.execute-api.eu-central-1.amazonaws.com/dev/'\n});\n","import React, { useState, useEffect }  from 'react';\nimport './App.css';\nimport API from './api';\n\nfunction Pic(props) {\n\n\t\treturn (\n\t\t\t\t\t\t<img src={props.src} alt=\"Parking view\" />\n\t\t);\n}\n\nasync function getPicData() {\n\t\tconst response = await API.get(\"view\");\n\t\tconsole.log(\"response:\", response);\n\t\treturn response.data;\n\n\t\t// return new Promise( (resolutionFunc,rejectionFunc) => {\n\t\t// \t\tresolutionFunc({\n\t\t// \t\t\t\turl: \"https://www.ima-home.be/layout/uploads/2020/06/ima-slide1.jpg\",\n\t\t// \t\t\t\tmessage: \"xxxxx\",\n\t\t// \t\t});\n\t\t// });\n}\n\n\nfunction App() {\n\t\tconst [state, setState] = useState({\n\t\t\t\tpicSrc: undefined,\n\t\t\t\tfirstPic: true,\n\t\t});\n\t\t\n\t\tuseEffect(() => {\n\t\t\t\tconst renewInterval = state.firstPic ? 0 : state.duration;\n\t\t\t\tconsole.log('Setting ' + renewInterval + ' sec timeout to renew...');\n\t\t\t\tconst timer = setTimeout(() => {\n\t\t\t\t\t\tgetPicData().then(data => {\n\t\t\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\t\t\tconst duration = (data.duration ? data.duration : 60);\n\t\t\t\t\t\t\t\tsetState({\n\t\t\t\t\t\t\t\t\t\tpicSrc: data.url,\n\t\t\t\t\t\t\t\t\t\tfirstPic: false,\n\t\t\t\t\t\t\t\t\t\tduration: duration,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tdocument.title = data.message;\n\t\t\t\t\t\t});\n\t\t\t\t}, renewInterval*1000);\n\t\t\t\t// Clear timeout if the component is unmounted\n\t\t\t\treturn () => clearTimeout(timer);\n\t\t});\n\n\t\treturn (\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<div className=\"App-header\">\n\t\t\t\t\t\t<Pic src={state.picSrc} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t);\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}