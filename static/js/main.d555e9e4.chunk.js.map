{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","trace","console","log","locations","currentLocation","location","a","API","get","response","data","App","useState","picSrc","undefined","firstPic","state","setState","makeStyle","url","frameTime","saturation","sec","x","Math","max","min","saturationF","Date","getTime","backgroundImage","backgroundColor","backgroundSize","backgroundRepeat","backgroundAttachment","backgroundPosition","filter","refreshPic","getPicData","then","duration","style","document","title","message","catch","err","retries","useEffect","renewInterval","timer","setTimeout","clearTimeout","setNextLocation","length","className","onTouchEnd","e","onMouseUp","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"mTAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,mECCPC,EAAQC,QAAQC,IAEhBC,EAAY,CACd,oBACA,sBAGAC,EAAkB,EAEtB,SAASC,IACL,OAAOF,EAAUC,G,4CAGrB,4BAAAE,EAAA,sEAC2BC,EAAIC,IAAJ,wBAAyBH,MADpD,cACUI,EADV,OAEIR,QAAQC,IAAI,YAAaO,GAF7B,kBAGWA,EAASC,MAHpB,4C,sBAuHeC,MA1Gf,WAAgB,IAAD,EACeC,mBAAS,CACtCC,YAAQC,EACRC,UAAU,IAHI,mBACJC,EADI,KACGC,EADH,KAMLC,EAAY,SAACC,EAAKC,GAKpB,IAeMC,EAVc,SAACC,GAMjB,IAAMC,EAAID,EAAM,GAChB,OAAOE,KAAKC,IAAI,EAAGD,KAAKE,IAAI,IAAK,IAAM,GAAKH,IAG7BI,GAfP,IAAIC,MACMC,UAAY,IAAID,KAAKR,GAAWS,WAAW,IAC7C,IAepB,MAAO,CACHC,gBAAgB,OAAD,OAAQX,EAAR,KACfY,gBAAiB,UACjBC,eAAgB,UAChBC,iBAAkB,YAClBC,qBAAsB,QACtBC,mBAAoB,SACpBC,OAAO,QAAD,OArBG,EAqBH,wBAA8Bf,EAA9B,QAIRgB,EAAa,Y,2CACtBC,GAAaC,MAAK,SAAA7B,GACdV,EAAMU,GACN,IAAM8B,EAAY9B,EAAK8B,SAAW9B,EAAK8B,SAAW,GACrCrB,EAAMT,EAAKS,IACXC,EAAYV,EAAKU,UACjBqB,EAAQvB,EAAUC,EAAKC,GACpCH,EAAS,CACZJ,OAAQM,EACRJ,UAAU,EACVyB,SAAUA,EACIpB,UAAWA,EACXqB,MAAOA,IAElBC,SAASC,MAAQjC,EAAKkC,QAAL,uBAA+BvC,IAA/B,YAA6C,IAAIuB,KAAKR,OACxEyB,OAAM,SAAAC,GACE7C,QAAQC,IAAI4C,GACnB,IACaL,EAAQvB,EAAUF,EAAMH,OAAQG,EAAMI,WACtC2B,EAAU/B,EAAM+B,QAAW/B,EAAM+B,QAAU,EAAK,EAC7D9B,EAAS,CACZJ,OAAQG,EAAMH,OACdE,UAAU,EACVyB,SANoB,GAONpB,UAAWJ,EAAMI,UACjBqB,MAAOA,EACPM,QAASA,IAEpBL,SAASC,MAAQ,oBAAaI,EAAb,MAA2B/B,EAAMI,UAAN,gBAA2BJ,EAAMI,UAAjC,QAAmD,WAIhG4B,qBAAU,WACb,IAAMC,EAAgBjC,EAAMD,SAAW,EAAIC,EAAMwB,SACjDvC,QAAQC,IAAI,sBAAuB+C,GACnC,IAAMC,EAAQC,WAAWd,EAA0B,IAAdY,GAErC,OAAO,kBAAMG,aAAaF,OAGvB,IAAMG,EAAkB,WAC3BjD,GAAmBA,EAAkB,GAAKD,EAAUmD,OACpDrD,QAAQC,IAAI,YAAaG,KAEzBgC,KAWG,OACH,yBAAKkB,UAAU,MAAMd,MAAOzB,EAAMyB,MAC7Be,WAAY,SAAAC,GATjBJ,KAUKK,UAAW,WANhBL,MAQI,yBAAKE,UAAU,cACjBvC,EAAMI,UAAY,GAAK,6BCtHNuC,QACW,cAA7BC,OAAOvD,SAASwD,UAEe,UAA7BD,OAAOvD,SAASwD,UAEhBD,OAAOvD,SAASwD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLvE,QAAQuE,MAAMA,EAAM5B,c","file":"static/js/main.d555e9e4.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://ib9m7jp63g.execute-api.eu-central-1.amazonaws.com/dev/'\n//      baseURL: 'https://httpbin.org/status/404'\n});\n","import React, { useState, useEffect }  from 'react';\nimport './App.css';\nimport API from './api';\n\nconst trace = console.log;\n\nconst locations = [\n    \"a07345b2737af5f/1\",\n    \"8f38301f7f70d7d1/1\",\n]\n\nvar currentLocation = 0;\n\nfunction location() {\n    return locations[currentLocation];\n}\n\nasync function getPicData() {\n    const response = await API.get(`view?location=${location()}`);\n    console.log(\"response:\", response);\n    return response.data;\n\n    // return new Promise( (resolutionFunc,rejectionFunc) => {\n    // \t\tresolutionFunc({\n    // \t\t\t\turl: \"https://www.ima-home.be/layout/uploads/2020/06/ima-slide1.jpg\",\n    // \t\t\t\tmessage: \"xxxxx\",\n    // \t\t});\n    // });\n}\n\nfunction App() {\n    const [state, setState] = useState({\n\tpicSrc: undefined,\n\tfirstPic: true,\n    });\n\n    const makeStyle = (url, frameTime) => {\n        // See:\n        // - https://css-tricks.com/almanac/properties/f/filter/\n        // - https://css-tricks.com/gooey-effect/\n        // - https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Backgrounds_and_Borders/Resizing_background_images\n        const now = new Date();\n        const frameAge = (now.getTime() - new Date(frameTime).getTime())/1000; // in sec\n        const expectedAge = 5 + 60; // sec\n        const blur = 0;\n\n        const saturationF = (sec) => {\n            /*\n             * Saturation [0-100] for:\n             *   - 1 min is 100% (full color)\n             *   - 5 min is 0% (no colors)\n             */\n            const x = sec / 60.0; // min, fractions\n            return Math.max(0, Math.min(100, 100 - 25 * x));\n        }\n\n        const saturation = saturationF(frameAge - expectedAge);\n\n        return {\n            backgroundImage:`url(${url})`,\n            backgroundColor: '#282c34',\n            backgroundSize: 'contain',\n            backgroundRepeat: 'no-repeat',\n            backgroundAttachment: 'fixed',\n            backgroundPosition: 'center',\n            filter: `blur(${blur}px) saturate(${saturation}%)`,\n        };\n    };\n\n    const refreshPic = () => {\n\tgetPicData().then(data => {\n\t    trace(data);\n\t    const duration = (data.duration ? data.duration : 60);\n            const url = data.url;\n            const frameTime = data.frameTime;\n            const style = makeStyle(url, frameTime);\n\t    setState({\n\t\tpicSrc: url,\n\t\tfirstPic: false,\n\t\tduration: duration,\n                frameTime: frameTime,\n                style: style,\n\t    });\n\t    document.title = data.message + `, parking at ${location()} ${new Date(frameTime)}`;\n\t}).catch(err => {\n            console.log(err);\n\t    const duration = 30;\n            const style = makeStyle(state.picSrc, state.frameTime);\n            const retries = state.retries ? (state.retries + 1) : 0;\n\t    setState({\n\t\tpicSrc: state.picSrc,\n\t\tfirstPic: false,\n\t\tduration: duration,\n                frameTime: state.frameTime,\n                style: style,\n                retries: retries,\n\t    });\n\t    document.title = `Retrying (${retries})` + (state.frameTime ? ` from ${state.frameTime} ...` : '...');\n        });\n    };\n\t\t\n    useEffect(() => {\n\tconst renewInterval = state.firstPic ? 0 : state.duration;\n\tconsole.log('Timeout till renew:', renewInterval);\n\tconst timer = setTimeout(refreshPic, renewInterval*1000);\n\t// Clear timeout if the component is unmounted\n\treturn () => clearTimeout(timer);\n    });\n\n    const setNextLocation = () => {\n\tcurrentLocation = (currentLocation + 1) % locations.length;\n\tconsole.log(\"location:\", location());\n\n\trefreshPic();\n    };\n\n    const touchEndEventHandler = (event) => {\n\tsetNextLocation();\n    };\n\n    const mouseUpEventHandler = (event) => {\n\tsetNextLocation();\n    };\n\n    return (\n\t<div className=\"App\" style={state.style}\n\t     onTouchEnd={e => touchEndEventHandler(e)}\n\t     onMouseUp={() => mouseUpEventHandler()}\n\t>\n\t    <div className=\"App-header\">\n\t\t{state.frameTime ? \"\" : \"Loading parking view...\"}\n\t    </div>\n\t</div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}